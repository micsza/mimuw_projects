

module AbsBlah where

-- Haskell module generated by the BNF converter




newtype Id = Id ((Int,Int),String) deriving (Eq, Ord, Show, Read)
data Program = Prog [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DVar VarDecl | DFun FunDef
  deriving (Eq, Ord, Show, Read)

data FunDef = DFunAll FType Id [Arg] FunBody
  deriving (Eq, Ord, Show, Read)

data FunBody = DFunBody [Stmt] RetStmt
  deriving (Eq, Ord, Show, Read)

data Stmt
    = StmtVarDec VarDecl
    | StmtFunDef FunDef
    | SExpr Expr
    | SEmpty
    | SBlock [Stmt]
    | SWhile Expr Stmt
    | StmtIfelse Expr Stmt Stmt
    | StmtIf Expr Stmt
    | StmtPrint Expr
  deriving (Eq, Ord, Show, Read)

data RetStmt = StmtRetExpr Expr
  deriving (Eq, Ord, Show, Read)

data Arg
    = ArgVal Type Id
    | ArgFun FType Id [FType]
    | ArgVar Type Id
    | ArgInout Type Id
  deriving (Eq, Ord, Show, Read)

data VarDecl
    = DVarSimple Type Id
    | DVarList Type Id [Id]
    | DVarExpr Type Id Expr
    | DVarRecord [VarDecl] Id
  deriving (Eq, Ord, Show, Read)

data Acc
    = AccEmpty
    | AccArray Expr Acc
    | AccMap Expr Acc
    | AccApp [Expr] Acc
    | AccRec Id Acc
  deriving (Eq, Ord, Show, Read)

data Expr
    = EString String
    | EInt Integer
    | ETrue
    | EFalse
    | EAcc Id Acc
    | EPIncr Expr
    | EPDecr Expr
    | EIncr Expr
    | EDecr Expr
    | ETimes Expr Expr
    | EDiv Expr Expr
    | EPlus Expr Expr
    | EMinus Expr Expr
    | ELt Expr Expr
    | EGt Expr Expr
    | ELtEq Expr Expr
    | EGtEq Expr Expr
    | EEq Expr Expr
    | ENEq Expr Expr
    | EAnd Expr Expr
    | EOr Expr Expr
    | ENot Expr
    | EAss Expr Ass Expr
  deriving (Eq, Ord, Show, Read)

data Ass = AssPure | AssPlus | AssMinus | AssTimes | AssDiv
  deriving (Eq, Ord, Show, Read)

data Type
    = TBool
    | TInt
    | TString
    | TArray Type Integer
    | TRecord Id
    | TMap Type Type
  deriving (Eq, Ord, Show, Read)

data FType = TFTypeT Type | TFTypeF FType
  deriving (Eq, Ord, Show, Read)

