{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintBlah where

-- pretty-printer generated by the BNF converter

import AbsBlah
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id (_,i)) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print Program where
  prt i e = case e of
    Prog defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print Def where
  prt i e = case e of
    DVar vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
    DFun fundef -> prPrec i 0 (concatD [prt 0 fundef])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print FunDef where
  prt i e = case e of
    DFunAll ftype id args funbody -> prPrec i 0 (concatD [prt 0 ftype, doc (showString "<<"), prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 funbody])

instance Print FunBody where
  prt i e = case e of
    DFunBody stmts retstmt -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, prt 0 retstmt, doc (showString "}")])

instance Print Stmt where
  prt i e = case e of
    StmtVarDec vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
    StmtFunDef fundef -> prPrec i 0 (concatD [prt 0 fundef])
    SExpr expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    SEmpty -> prPrec i 0 (concatD [doc (showString ";")])
    SBlock stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SWhile expr stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    StmtIfelse expr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    StmtIf expr stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    StmtPrint expr -> prPrec i 0 (concatD [doc (showString "print"), prt 0 expr, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print RetStmt where
  prt i e = case e of
    StmtRetExpr expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])

instance Print Arg where
  prt i e = case e of
    ArgVal type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
    ArgFun ftype id ftypes -> prPrec i 0 (concatD [prt 0 ftype, doc (showString "<<"), prt 0 id, doc (showString "("), prt 0 ftypes, doc (showString ")")])
    ArgVar type_ id -> prPrec i 0 (concatD [doc (showString "var"), prt 0 type_, prt 0 id])
    ArgInout type_ id -> prPrec i 0 (concatD [doc (showString "inout"), prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print VarDecl where
  prt i e = case e of
    DVarSimple type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString ";")])
    DVarList type_ id ids -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString ","), prt 0 ids, doc (showString ";")])
    DVarExpr type_ id expr -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "="), prt 0 expr, doc (showString ";")])
    DVarRecord vardecls id -> prPrec i 0 (concatD [doc (showString "record"), doc (showString "{"), prt 0 vardecls, doc (showString "}"), prt 0 id, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Acc where
  prt i e = case e of
    AccEmpty -> prPrec i 0 (concatD [])
    AccArray expr acc -> prPrec i 0 (concatD [doc (showString "["), prt 0 expr, doc (showString "]"), prt 0 acc])
    AccMap expr acc -> prPrec i 0 (concatD [doc (showString "[["), prt 0 expr, doc (showString "]]"), prt 0 acc])
    AccApp exprs acc -> prPrec i 0 (concatD [doc (showString "("), prt 0 exprs, doc (showString ")"), prt 0 acc])
    AccRec id acc -> prPrec i 0 (concatD [doc (showString "."), prt 0 id, prt 0 acc])

instance Print Expr where
  prt i e = case e of
    EString str -> prPrec i 15 (concatD [prt 0 str])
    EInt n -> prPrec i 15 (concatD [prt 0 n])
    ETrue -> prPrec i 15 (concatD [doc (showString "true")])
    EFalse -> prPrec i 15 (concatD [doc (showString "false")])
    EAcc id acc -> prPrec i 15 (concatD [prt 0 id, prt 0 acc])
    EPIncr expr -> prPrec i 14 (concatD [prt 15 expr, doc (showString "++")])
    EPDecr expr -> prPrec i 14 (concatD [prt 15 expr, doc (showString "--")])
    EIncr expr -> prPrec i 13 (concatD [doc (showString "++"), prt 14 expr])
    EDecr expr -> prPrec i 13 (concatD [doc (showString "--"), prt 14 expr])
    ETimes expr1 expr2 -> prPrec i 12 (concatD [prt 12 expr1, doc (showString "*"), prt 13 expr2])
    EDiv expr1 expr2 -> prPrec i 12 (concatD [prt 12 expr1, doc (showString "/"), prt 13 expr2])
    EPlus expr1 expr2 -> prPrec i 11 (concatD [prt 11 expr1, doc (showString "+"), prt 12 expr2])
    EMinus expr1 expr2 -> prPrec i 11 (concatD [prt 11 expr1, doc (showString "-"), prt 12 expr2])
    ELt expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString "<"), prt 10 expr2])
    EGt expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString ">"), prt 10 expr2])
    ELtEq expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString "<="), prt 10 expr2])
    EGtEq expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString ">="), prt 10 expr2])
    EEq expr1 expr2 -> prPrec i 8 (concatD [prt 8 expr1, doc (showString "=="), prt 9 expr2])
    ENEq expr1 expr2 -> prPrec i 8 (concatD [prt 8 expr1, doc (showString "!="), prt 9 expr2])
    EAnd expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "&&"), prt 5 expr2])
    EOr expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "||"), prt 4 expr2])
    ENot expr -> prPrec i 2 (concatD [doc (showString "not"), prt 3 expr])
    EAss expr1 ass expr2 -> prPrec i 2 (concatD [prt 15 expr1, prt 0 ass, prt 2 expr2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Ass where
  prt i e = case e of
    AssPure -> prPrec i 0 (concatD [doc (showString "=")])
    AssPlus -> prPrec i 0 (concatD [doc (showString "+=")])
    AssMinus -> prPrec i 0 (concatD [doc (showString "-=")])
    AssTimes -> prPrec i 0 (concatD [doc (showString "*=")])
    AssDiv -> prPrec i 0 (concatD [doc (showString "/=")])

instance Print Type where
  prt i e = case e of
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TString -> prPrec i 0 (concatD [doc (showString "string")])
    TArray type_ n -> prPrec i 0 (concatD [doc (showString "array"), prt 0 type_, prt 0 n])
    TRecord id -> prPrec i 0 (concatD [doc (showString "record"), prt 0 id])
    TMap type_1 type_2 -> prPrec i 0 (concatD [doc (showString "map"), doc (showString "<"), prt 0 type_1, doc (showString ","), prt 0 type_2, doc (showString ">")])

instance Print FType where
  prt i e = case e of
    TFTypeT type_ -> prPrec i 0 (concatD [prt 0 type_])
    TFTypeF ftype -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 ftype])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

