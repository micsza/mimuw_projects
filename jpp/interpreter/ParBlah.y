-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParBlah where
import AbsBlah
import LexBlah
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '*=' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  '++' { PT _ (TS _ 8) }
  '+=' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '-=' { PT _ (TS _ 13) }
  '.' { PT _ (TS _ 14) }
  '/' { PT _ (TS _ 15) }
  '/=' { PT _ (TS _ 16) }
  ';' { PT _ (TS _ 17) }
  '<' { PT _ (TS _ 18) }
  '<<' { PT _ (TS _ 19) }
  '<=' { PT _ (TS _ 20) }
  '=' { PT _ (TS _ 21) }
  '==' { PT _ (TS _ 22) }
  '>' { PT _ (TS _ 23) }
  '>=' { PT _ (TS _ 24) }
  '[' { PT _ (TS _ 25) }
  '[[' { PT _ (TS _ 26) }
  ']' { PT _ (TS _ 27) }
  ']]' { PT _ (TS _ 28) }
  'array' { PT _ (TS _ 29) }
  'bool' { PT _ (TS _ 30) }
  'else' { PT _ (TS _ 31) }
  'false' { PT _ (TS _ 32) }
  'fun' { PT _ (TS _ 33) }
  'if' { PT _ (TS _ 34) }
  'inout' { PT _ (TS _ 35) }
  'int' { PT _ (TS _ 36) }
  'map' { PT _ (TS _ 37) }
  'not' { PT _ (TS _ 38) }
  'print' { PT _ (TS _ 39) }
  'record' { PT _ (TS _ 40) }
  'return' { PT _ (TS _ 41) }
  'string' { PT _ (TS _ 42) }
  'true' { PT _ (TS _ 43) }
  'var' { PT _ (TS _ 44) }
  'while' { PT _ (TS _ 45) }
  '{' { PT _ (TS _ 46) }
  '||' { PT _ (TS _ 47) }
  '}' { PT _ (TS _ 48) }

L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_Id { PT _ (T_Id _) }


%%

String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Id    :: { Id} : L_Id { Id (mkPosToken $1)}

Program :: { Program }
Program : ListDef { AbsBlah.Prog (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : VarDecl { AbsBlah.DVar $1 } | FunDef { AbsBlah.DFun $1 }
FunDef :: { FunDef }
FunDef : FType '<<' Id '(' ListArg ')' FunBody { AbsBlah.DFunAll $1 $3 $5 $7 }
FunBody :: { FunBody }
FunBody : '{' ListStmt RetStmt '}' { AbsBlah.DFunBody (reverse $2) $3 }
Stmt :: { Stmt }
Stmt : VarDecl { AbsBlah.StmtVarDec $1 }
     | FunDef { AbsBlah.StmtFunDef $1 }
     | Expr ';' { AbsBlah.SExpr $1 }
     | ';' { AbsBlah.SEmpty }
     | '{' ListStmt '}' { AbsBlah.SBlock (reverse $2) }
     | 'while' '(' Expr ')' Stmt { AbsBlah.SWhile $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsBlah.StmtIfelse $3 $5 $7 }
     | 'if' '(' Expr ')' Stmt { AbsBlah.StmtIf $3 $5 }
     | 'print' Expr ';' { AbsBlah.StmtPrint $2 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
RetStmt :: { RetStmt }
RetStmt : 'return' Expr ';' { AbsBlah.StmtRetExpr $2 }
Arg :: { Arg }
Arg : Type Id { AbsBlah.ArgVal $1 $2 }
    | FType '<<' Id '(' ListFType ')' { AbsBlah.ArgFun $1 $3 $5 }
    | 'var' Type Id { AbsBlah.ArgVar $2 $3 }
    | 'inout' Type Id { AbsBlah.ArgInout $2 $3 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
VarDecl :: { VarDecl }
VarDecl : Type Id ';' { AbsBlah.DVarSimple $1 $2 }
        | Type Id ',' ListId ';' { AbsBlah.DVarList $1 $2 $4 }
        | Type Id '=' Expr ';' { AbsBlah.DVarExpr $1 $2 $4 }
        | 'record' '{' ListVarDecl '}' Id ';' { AbsBlah.DVarRecord (reverse $3) $5 }
ListVarDecl :: { [VarDecl] }
ListVarDecl : {- empty -} { [] }
            | ListVarDecl VarDecl { flip (:) $1 $2 }
Acc :: { Acc }
Acc : {- empty -} { AbsBlah.AccEmpty }
    | '[' Expr ']' Acc { AbsBlah.AccArray $2 $4 }
    | '[[' Expr ']]' Acc { AbsBlah.AccMap $2 $4 }
    | '(' ListExpr ')' Acc { AbsBlah.AccApp $2 $4 }
    | '.' Id Acc { AbsBlah.AccRec $2 $3 }
Expr15 :: { Expr }
Expr15 : String { AbsBlah.EString $1 }
       | Integer { AbsBlah.EInt $1 }
       | 'true' { AbsBlah.ETrue }
       | 'false' { AbsBlah.EFalse }
       | Id Acc { AbsBlah.EAcc $1 $2 }
       | '(' Expr ')' { $2 }
Expr14 :: { Expr }
Expr14 : Expr15 '++' { AbsBlah.EPIncr $1 }
       | Expr15 '--' { AbsBlah.EPDecr $1 }
       | Expr15 { $1 }
Expr13 :: { Expr }
Expr13 : '++' Expr14 { AbsBlah.EIncr $2 }
       | '--' Expr14 { AbsBlah.EDecr $2 }
       | Expr14 { $1 }
Expr12 :: { Expr }
Expr12 : Expr12 '*' Expr13 { AbsBlah.ETimes $1 $3 }
       | Expr12 '/' Expr13 { AbsBlah.EDiv $1 $3 }
       | Expr13 { $1 }
Expr11 :: { Expr }
Expr11 : Expr11 '+' Expr12 { AbsBlah.EPlus $1 $3 }
       | Expr11 '-' Expr12 { AbsBlah.EMinus $1 $3 }
       | Expr12 { $1 }
Expr9 :: { Expr }
Expr9 : Expr9 '<' Expr10 { AbsBlah.ELt $1 $3 }
      | Expr9 '>' Expr10 { AbsBlah.EGt $1 $3 }
      | Expr9 '<=' Expr10 { AbsBlah.ELtEq $1 $3 }
      | Expr9 '>=' Expr10 { AbsBlah.EGtEq $1 $3 }
      | Expr10 { $1 }
Expr8 :: { Expr }
Expr8 : Expr8 '==' Expr9 { AbsBlah.EEq $1 $3 }
      | Expr8 '!=' Expr9 { AbsBlah.ENEq $1 $3 }
      | Expr9 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 '&&' Expr5 { AbsBlah.EAnd $1 $3 } | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 '||' Expr4 { AbsBlah.EOr $1 $3 } | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : 'not' Expr3 { AbsBlah.ENot $2 }
      | Expr15 Ass Expr2 { AbsBlah.EAss $1 $2 $3 }
      | Expr3 { $1 }
Expr :: { Expr }
Expr : Expr1 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 { $1 }
Expr5 :: { Expr }
Expr5 : Expr6 { $1 }
Expr6 :: { Expr }
Expr6 : Expr7 { $1 }
Expr7 :: { Expr }
Expr7 : Expr8 { $1 }
Expr10 :: { Expr }
Expr10 : Expr11 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
Ass :: { Ass }
Ass : '=' { AbsBlah.AssPure }
    | '+=' { AbsBlah.AssPlus }
    | '-=' { AbsBlah.AssMinus }
    | '*=' { AbsBlah.AssTimes }
    | '/=' { AbsBlah.AssDiv }
ListId :: { [Id] }
ListId : {- empty -} { [] }
       | Id { (:[]) $1 }
       | Id ',' ListId { (:) $1 $3 }
Type :: { Type }
Type : 'bool' { AbsBlah.TBool }
     | 'int' { AbsBlah.TInt }
     | 'string' { AbsBlah.TString }
     | 'array' Type Integer { AbsBlah.TArray $2 $3 }
     | 'record' Id { AbsBlah.TRecord $2 }
     | 'map' '<' Type ',' Type '>' { AbsBlah.TMap $3 $5 }
FType :: { FType }
FType : Type { AbsBlah.TFTypeT $1 }
      | 'fun' FType { AbsBlah.TFTypeF $2 }
ListFType :: { [FType] }
ListFType : {- empty -} { [] }
          | FType { (:[]) $1 }
          | FType ',' ListFType { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

